interface Cloudpilot {
    void Cloudpilot();

    VoidPtr Malloc(long size);
    void Free(VoidPtr buffer);

    boolean InitializeSession(VoidPtr buffer, long size, [Const] DOMString deviceType);

    long GetCyclesPerSecond();
    long RunEmulation(long cycles);
    void SetClockFactor(double clockFactor);

    [Ref] Frame CopyFrame();
    boolean IsScreenDirty();
    void MarkScreenClean();

    long MinMemoryForDevice([Const] DOMString deviceId);
    long FramebufferSizeForDevice([Const] DOMString deviceId);
    long TotalMemoryForDevice([Const] DOMString deviceId);

    void QueuePenMove(long x, long y);
    void QueuePenUp();

    void QueueButtonDown(long id);
    void QueueButtonUp(long id);

    void QueueKeyboardEvent(long c, boolean ctrl);

    boolean IsPowerOff();
    boolean IsUIInitialized();
    long GetOSVersion();
    boolean IsSetupComplete();

    void Reset();
    void ResetNoExtensions();
    void ResetHard();

    long InstallDb(VoidPtr buffer, long len);

    long GetPalette2bitMapping();

    VoidPtr GetMemoryPtr();
    VoidPtr GetDirtyPagesPtr();
    long GetMemorySize();

    VoidPtr GetRomPtr();
    long GetRomSize();

    VoidPtr GetSavestatePtr();
    long GetSavestateSize();

    boolean SaveState();
    boolean LoadState(VoidPtr buffer, long len);

    [Const] DOMString GetHotsyncName();
    void SetHotsyncName([Const] DOMString name);

    void RegisterPwmHandler(long handlerPtr);

    DbBackup StartBackup();

    void SetClipboardIntegration(boolean toggle);
    boolean GetClipboardIntegration();

    boolean IsSuspended();
    [Ref] SuspendContext GetSuspendContext();

    void SetNetworkRedirection(boolean toggle);
    boolean GetNetworkRedirection();
    void RegisterProxyDisconnectHandler(long handlerPtr);

    void SetHotsyncNameManagement(boolean toggle);
};

interface RomInfo {
    void RomInfo(VoidPtr buffer, long size);

    boolean IsValid();

    long CardVersion();
    [Const] DOMString CardName();
    long RomVersion();
    [Const] DOMString RomVersionString();

    boolean Supports([Const] DOMString deviceId);
};

interface Frame {
    long GetLineWidth();
    long GetBpp();
    long GetLines();
    long GetMargin();
    long GetBytesPerLine();

    VoidPtr GetBuffer();
    long GetBufferSize();
};

interface DbBackup {
    boolean Init(boolean includeRomDatabases);

    boolean IsInProgress();
    boolean IsDone();

    [Const] DOMString GetCurrentDatabase();

    boolean Save();
    void Skip();

    VoidPtr GetArchivePtr();
    long GetArchiveSize();
};

interface SuspendContextClipboardCopy {
    void Cancel();
    void Resume();

    [Const] DOMString GetClipboardContent();
};

interface SuspendContextClipboardPaste {
    void Cancel();
    void Resume([Const] DOMString clipboardContent);
};

interface SuspendContextNetworkConnect {
    void Cancel();
    void Resume([Const] DOMString sessionId);
};

interface SuspendContextNetworkRpc {
    void Cancel();
    long GetRequestSize();
    [Const] VoidPtr GetRequestData();
    void ReceiveResponse(VoidPtr data, long size);
};

interface SuspendContext {
    long GetKind();
    void Cancel();

    [Ref] SuspendContextClipboardCopy AsContextClipboardCopy();
    [Ref] SuspendContextClipboardPaste AsContextClipboardPaste();
    [Ref] SuspendContextNetworkConnect AsContextNetworkConnect();
    [Ref] SuspendContextNetworkRpc AsContextNetworkRpc();
};
