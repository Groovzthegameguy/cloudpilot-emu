syntax = "proto2";

message Address {
    required uint32 ip = 1;
    required int32 port = 2;
}

message MsgSocketOpenRequest {
    required uint32 type = 1;
    required uint32 protocol = 2;
}

message MsgSocketOpenResponse {
    required int32 handle = 1;
    required int32 err = 2;
}

message MsgSocketBindRequest {
    required int32 handle = 1;
    required Address address = 2;
    required int32 timeout = 3;
}

message MsgSocketBindResponse {
    required int32 err = 1;
}

message MsgSocketAddrRequest {
    required int32 handle = 1;
    required bool requestAddressLocal = 2;
    required bool requestAddressRemote = 3;
    required int32 timeout = 4;
}

message MsgSocketAddrResponse {
    optional Address addressLocal = 1;
    optional Address addressRemote = 2;
    required int32 err = 3;
}

message MsgSocketSendRequest {
    required int32 handle = 1;
    required bytes data = 2;
    required uint32 flags = 3;
    optional Address address = 4;
    required int32 timeout = 5;
}

message MsgSocketSendResponse {
    required int32 err = 1;
    required int32 bytesSent = 2;
}

message MsgSocketReceiveRequest {
    required int32 handle = 1;
    required uint32 flags = 2;
    required int32 timeout = 3;
    required uint32 maxLen = 4;
}

message MsgSocketReceiveResponse {
    required int32 err = 1;
    required bytes data = 2;
    optional Address address = 3;
}

message MsgSocketCloseRequest {
    required int32 handle = 1;
    required int32 timeout = 4;
}

message MsgSocketCloseResponse {
    required int32 err = 1;
}

message MsgGetHostByNameRequest {
    required string name = 1;
}

message MsgGetHostByNameResponse {
    required string name = 1;
    optional string alias = 2;
    repeated uint32 addresses = 3;
    required int32 err = 4;
}

message MsgGetServByNameRequest {
    required string name = 1;
    required string protocol = 2;
}

message MsgGetServByNameResponse {
    required uint32 port = 1;
    required int32 err = 2;
}

message MsgSocketConnectRequest {
    required int32 handle = 1;
    required Address address = 2;
    required int32 timeout = 3;
}

message MsgSocketConnectResponse {
    required int32 err = 1;
}

message MsgInvalidRequestResponse {
    required bool tag = 1;
}

message MsgRequest {
    required uint32 id = 1;

    oneof payload {
        MsgSocketOpenRequest socketOpenRequest = 2;
        MsgSocketBindRequest socketBindRequest = 3;
        MsgSocketAddrRequest socketAddrRequest = 4;
        MsgSocketSendRequest socketSendRequest = 5;
        MsgSocketReceiveRequest socketReceiveRequest = 6;
        MsgSocketCloseRequest socketCloseRequest = 7;
        MsgGetHostByNameRequest getHostByNameRequest = 8;
        MsgGetServByNameRequest getServByNameRequest = 9;
        MsgSocketConnectRequest socketConnectRequest = 10;
    }
}

message MsgResponse {
    required uint32 id = 1;

    oneof payload {
        MsgSocketOpenResponse socketOpenResponse = 2;
        MsgSocketBindResponse socketBindResponse = 3;
        MsgSocketAddrResponse socketAddrResponse = 4;
        MsgSocketSendResponse socketSendResponse = 5;
        MsgSocketReceiveResponse socketReceiveResponse = 6;
        MsgSocketCloseResponse socketCloseResponse = 7;
        MsgGetHostByNameResponse getHostByNameResponse = 8;
        MsgGetServByNameResponse getServByNameResponse = 9;
        MsgSocketConnectResponse socketConnectResponse = 10;
        MsgInvalidRequestResponse invalidRequestResponse = 255;
    }
}
